// lib/features/home/data/models/post_model.dart

import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:geoflutterfire2/geoflutterfire2.dart';
import 'package:swap_app/core/location/location_service.dart'; // For LatLng
import 'package:swap_app/features/home/domain/entities/post_entity.dart';

class PostModel extends PostEntity {
  const PostModel({
    required super.id,
    required super.userId,
    required super.title,
    required super.description,
    required super.imageUrls,
    required super.location,
    required super.address,
    required super.createdAt,
    super.likesCount,
    super.commentsCount,
    super.status,
    super.postedByUser, // Note: This field is typically populated in the presentation layer
  });

  // Factory constructor to create a PostModel from a Firestore DocumentSnapshot
  factory PostModel.fromDocumentSnapshot(String id, Map<String, dynamic> data) {
    // Handle potential null values gracefully
    final locationData = data['location'] as Map<String, dynamic>?;
    GeoPoint? geoPoint;
    if (locationData != null && locationData['geopoint'] is GeoPoint) {
      geoPoint = locationData['geopoint'] as GeoPoint;
    }

    return PostModel(
      id: id,
      userId:
          data['userId'] as String? ??
          '', // Provide default empty string if null
      title: data['title'] as String? ?? 'No Title',
      description: data['description'] as String? ?? 'No Description',
      imageUrls: List<String>.from(
        data['imageUrls'] as List? ?? [],
      ), // Handle null list
      location:
          geoPoint != null
              ? LatLng(
                latitude: geoPoint.latitude,
                longitude: geoPoint.longitude,
              )
              : const LatLng(
                latitude: 0.0,
                longitude: 0.0,
              ), // Default location if geopoint is missing
      address: data['address'] as String? ?? 'Unknown Location',
      createdAt:
          (data['createdAt'] as Timestamp?)?.toDate() ??
          DateTime.now(), // Default to now if timestamp is missing
      likesCount: data['likesCount'] as int? ?? 0,
      commentsCount: data['commentsCount'] as int? ?? 0,
      status: data['status'] as String? ?? 'available',
      // postedByUser is typically NOT populated here; it's done in the presentation layer
    );
  }

  // Method to convert a PostModel (or PostEntity) to a Map for Firestore
  Map<String, dynamic> toMap() {
    // Create GeoFirePoint data structure for Firestore
    // final geo = GeoFlutterFire();
    // final geoPoint = geo.point(
    //   latitude: location.latitude,
    //   longitude: location.longitude,
    // );

    return {
      // id is usually auto-generated by Firestore when adding a new document
      'userId': userId,
      'title': title,
      'description': description,
      'imageUrls': imageUrls,
      // 'location': geoPoint.data, // Store GeoPoint and Geohash
      'address': address,
      'createdAt': Timestamp.fromDate(createdAt), // Use Firestore Timestamp
      'likesCount': likesCount,
      'commentsCount': commentsCount,
      'status': status,
      // postedByUser is not stored in the post document itself
    };
  }

  // Helper to convert PostEntity to PostModel (useful when creating a new post)
  factory PostModel.fromEntity(PostEntity entity) {
    return PostModel(
      id: entity.id, // Should be empty string for new posts
      userId: entity.userId,
      title: entity.title,
      description: entity.description,
      imageUrls: entity.imageUrls,
      location: entity.location,
      address: entity.address,
      createdAt: entity.createdAt,
      likesCount: entity.likesCount,
      commentsCount: entity.commentsCount,
      status: entity.status,
      // postedByUser is not converted
    );
  }
}
