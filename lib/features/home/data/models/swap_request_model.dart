// lib/features/home/data/models/swap_request_model.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:swap_app/features/home/domain/entities/swap_request_entity.dart'; // Import SwapRequestEntity

class SwapRequestModel extends SwapRequestEntity {
  const SwapRequestModel({
    required super.id,
    required super.requestingUserId,
    required super.requestedPostId,
    required super.requestedPostOwnerId,
    super.offeringPostId,
    required super.createdAt,
    super.status,
    // Note: requestingUser, requestedPostOwner, requestedPost, offeringPost
    // are typically NOT included in the model or stored directly in the document.
    // They are populated in the presentation layer by fetching related data.
  });

  // Factory constructor to create a SwapRequestModel from a Firestore DocumentSnapshot
  factory SwapRequestModel.fromDocumentSnapshot(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>?;
    if (data == null) {
      throw Exception('Swap request document data is null for ID: ${doc.id}');
    }

    // Convert status string from Firestore to SwapRequestStatus enum
    SwapRequestStatus status = SwapRequestStatus.values.firstWhere(
      (e) => e.toString().split('.').last == data['status'],
      orElse:
          () =>
              SwapRequestStatus
                  .pending, // Default to pending if status is missing or invalid
    );

    return SwapRequestModel(
      id: doc.id,
      requestingUserId: data['requestingUserId'] as String? ?? '',
      requestedPostId: data['requestedPostId'] as String? ?? '',
      requestedPostOwnerId: data['requestedPostOwnerId'] as String? ?? '',
      offeringPostId: data['offeringPostId'] as String?, // This can be null
      createdAt: (data['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      status: status,
    );
  }

  // Method to convert a SwapRequestModel (or SwapRequestEntity) to a Map for Firestore
  Map<String, dynamic> toMap() {
    return {
      // id is usually auto-generated by Firestore
      'requestingUserId': requestingUserId,
      'requestedPostId': requestedPostId,
      'requestedPostOwnerId': requestedPostOwnerId,
      'offeringPostId': offeringPostId,
      'createdAt': Timestamp.fromDate(createdAt),
      'status': status.toString().split('.').last, // Store enum as string
    };
  }

  // Helper to convert SwapRequestEntity to SwapRequestModel (useful when creating a new request)
  factory SwapRequestModel.fromEntity(SwapRequestEntity entity) {
    return SwapRequestModel(
      id: entity.id, // Should be empty string for new requests
      requestingUserId: entity.requestingUserId,
      requestedPostId: entity.requestedPostId,
      requestedPostOwnerId: entity.requestedPostOwnerId,
      offeringPostId: entity.offeringPostId,
      createdAt: entity.createdAt,
      status: entity.status,
    );
  }
}
